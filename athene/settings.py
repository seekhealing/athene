"""
Django settings for athene project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import json

import dj_database_url


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "0p3ns3s4m3!#")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DEBUG", ""))

ALLOWED_HOSTS = (
    ["spicy-meatball.flowtheory.net"]
    if DEBUG
    else ["seekers.seekhealing.org", "seekhealing-athene.herokuapp.com", "seekhealing-athene-staging.herokuapp.com"]
)


# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    "admin_tools",
    "admin_tools.theming",
    "admin_tools.menu",
    "admin_tools.dashboard",
    "athene.apps.AtheneAdminConfig",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "localflavor.us",
    "phonenumber_field",
    "ckeditor",
    "social_django",
    "seekers",
    "events",
    "clinical",
]
if DEBUG:
    try:
        import debug_toolbar  # noqa
    except ImportError:
        pass
    else:
        INSTALLED_APPS.append("debug_toolbar")


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "threadlocals.middleware.ThreadLocalMiddleware",
]
if DEBUG:
    try:
        import debug_toolbar  # noqa
    except ImportError:
        pass
    else:
        MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware",)

ROOT_URLCONF = "athene.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["athene/templates"],
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
            ],
            "loaders": [
                "admin_tools.template_loaders.Loader",
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
            ],
        },
    },
]

WSGI_APPLICATION = "athene.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(env="DATABASE_URL", default="postgres://athene:athene@127.0.0.1:5432/athene")
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "US/Eastern"

USE_I18N = False

USE_L10N = False

USE_TZ = True

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {"standard": {"format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"}},
    "handlers": {"default": {"level": "DEBUG", "formatter": "standard", "class": "logging.StreamHandler"}},
    "loggers": {
        "athene": {"handlers": ["default"], "level": "DEBUG"},
        "seekers": {"handlers": ["default"], "level": "DEBUG"},
        "events": {"handlers": ["default"], "level": "DEBUG"},
        "celery.tasks": {"handlers": ["default"], "level": "DEBUG"},
    },
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"

PHONENUMBER_DB_FORMAT = "NATIONAL"
PHONENUMBER_DEFAULT_REGION = "US"

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = ["athene/static/"]

INTERNAL_IPS = ["127.0.0.1"]

CKEDITOR_CONFIGS = {
    "default": {
        "toolbar": "Custom",
        "toolbar_Custom": [
            ["Bold", "Italic", "Underline"],
            ["NumberedList", "BulletedList"],
            ["Link", "Unlink"],
            ["RemoveFormat", "Source"],
        ],
        "allowedContent": "p b strong i em u ul ol li a[!href]",
    }
}

GOOGLEMAPS_API = os.environ.get("GOOGLEMAPS_API", None)

MAILCHIMP_API_KEY = os.environ.get("MAILCHIMP_API_KEY")
MAILCHIMP_USERNAME = os.environ.get("MAILCHIMP_USERNAME")
MAILCHIMP_LIST_ID = os.environ.get("MAILCHIMP_LIST_ID")

MAILCHIMP_TAGS = json.loads(os.environ.get("MAILCHIMP_TAGS", "[]"))
MAILCHIMP_DEFAULT_HUMAN_TAGS = json.loads(os.environ.get("MAILCHIMP_DEFAULT_HUMAN_TAGS", "[]"))
MAILCHIMP_DEFAULT_SEEKER_TAGS = json.loads(os.environ.get("MAILCHIMP_DEFAULT_SEEKER_TAGS", "[]"))
MAILCHIMP_DEFAULT_COMMUNITYPARTNER_TAGS = json.loads(os.environ.get("MAILCHIMP_DEFAULT_COMMUNITYPARTNER_TAGS", "[]"))

if "SENTRY_DSN" in os.environ:
    import sentry_sdk  # noqa: E402
    from sentry_sdk.integrations.django import DjangoIntegration

    sentry_sdk.init(dsn=os.environ["SENTRY_DSN"], integrations=[DjangoIntegration()])

SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"
SESSION_COOKIE_HTTPONLY = True

EMAIL_BACKEND = (
    "django.core.mail.backends.console.EmailBackend" if DEBUG else "django.core.mail.backends.smtp.EmailBackend"
)
EMAIL_HOST = os.environ.get("MAILGUN_SMTP_SERVER", "")
EMAIL_PORT = os.environ.get("MAILGUN_SMTP_PORT", "")
EMAIL_HOST_USER = os.environ.get("MAILGUN_SMTP_LOGIN", "")
EMAIL_HOST_PASSWORD = os.environ.get("MAILGUN_SMTP_PASSWORD", "")
DEFAULT_FROM_EMAIL = "athene@seekers.seekhealing.org"
MAILGUN_BYPASS_SIGNATURE = os.environ.get("MAILGUN_BYPASS_SIGNATURE")

TWILIO_BYPASS_SIGNATURE = os.environ.get("TWILIO_BYPASS_SIGNATURE")

CELERY_BROKER_URL = os.environ.get("REDIS_URL", "redis://127.0.0.1:6379/1")
CELERY_RESULT_BACKEND = os.environ.get("REDIS_URL", "redis://127.0.0.1:6379/1")

SLACK_WEBHOOK_MAP = json.loads(os.environ.get("SLACK_WEBHOOK_MAP", "{}"))
DEFAULT_SLACK_CHANNEL = "#techstuff" if DEBUG else "#calendar"

ADMIN_TOOLS_THEMING_CSS = "css/athene-admin.css"
ADMIN_TOOLS_INDEX_DASHBOARD = "athene.dashboard.AtheneDashboard"

AUTHENTICATION_BACKENDS = (
    "social_core.backends.google.GoogleOAuth2",
    "athene.backends.SuperUserOnlyModelBackend",
)
SOCIAL_AUTH_POSTGRES_JSONFIELD = True
SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ["username", "first_name", "last_name", "email"]
SOCIAL_AUTH_PIPELINE = (
    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. In some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.
    "social_core.pipeline.social_auth.social_details",
    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.
    "social_core.pipeline.social_auth.social_uid",
    # Verifies that the current auth process is valid within the current
    # project, this is where emails and domains whitelists are applied (if
    # defined).
    "social_core.pipeline.social_auth.auth_allowed",
    # Checks if the current social-account is already associated in the site.
    "social_core.pipeline.social_auth.social_user",
    # Make up a username for this person, appends a random string at the end if
    # there's any collision.
    "social_core.pipeline.user.get_username",
    # Send a validation email to the user to verify its email address.
    # Disabled by default.
    # 'social_core.pipeline.mail.mail_validation',
    # Associates the current social details with another user account with
    # a similar email address. Disabled by default.
    "social_core.pipeline.social_auth.associate_by_email",
    # Create a user account if we haven't found one yet.
    "social_core.pipeline.user.create_user",
    # Create the record that associates the social account with the user.
    "social_core.pipeline.social_auth.associate_user",
    # Populate the extra_data field in the social record with the values
    # specified by settings (and the default ones like access_token, etc).
    "social_core.pipeline.social_auth.load_extra_data",
    # Update the user record with any changed info from the auth service.
    "social_core.pipeline.user.user_details",
)
SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS = ["seekhealing.org"]
SOCIAL_AUTH_SESSION_EXPIRATION = True
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get("GOOGLE_CLIENT_ID")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get("GOOGLE_CLIENT_SECRET")
